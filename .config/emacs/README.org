* Emacs Literate Configuration File :TOC:
  - [[#use-package-setup][Use-Package Setup]]
  - [[#gcmh-garbage-collection-optimization][GCMH (Garbage Collection Optimization)]]
  - [[#evil-vim-emulation][Evil (Vim Emulation)]]
  - [[#undo-tree-persistent-undo-history][Undo Tree (Persistent Undo History)]]
  - [[#which-key-key-suggestions][Which-Key (Key-Suggestions)]]
  - [[#ivy-search-engine][Ivy (Search Engine)]]
  - [[#electric-pair-mode-automatic-delimiter-insertion][Electric Pair Mode (Automatic Delimiter Insertion)]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#helpful-enhanced-help-functions][Helpful (Enhanced Help Functions)]]
  - [[#auto-revert-mode-sync-file-changes][Auto Revert Mode (Sync File Changes)]]
  - [[#lsp-mode-lsp-support][LSP Mode (LSP Support)]]
  - [[#dap-mode-debugging][Dap Mode (Debugging)]]
  - [[#evil-nerd-commenter-better-line-commenting][Evil Nerd Commenter (Better Line Commenting)]]
  - [[#company-autosuggestion][Company (Autosuggestion)]]
  - [[#projectile][Projectile]]
  - [[#format-all-format-code][Format All (format code)]]
  - [[#rustic-rust-language-support][Rustic (Rust Language Support)]]
  - [[#c-mode-cc-language-support][C Mode (C/C++ Language Support)]]
  - [[#python-mode-python-language-support][Python Mode (Python Language Support)]]
  - [[#haskell-mode-haskell-language-support][Haskell Mode (Haskell Language Support)]]
  - [[#racket-mode-racket-language-support][Racket Mode (Racket Language Support)]]
  - [[#lua-mode-lua-language-support][Lua Mode (Lua Language Support)]]
  - [[#sqls-sql-language-support][SQLS (SQL Language Support)]]
  - [[#plantuml-language-support][PlantUML Language Support]]
  - [[#yaml-mode-yaml-language-support][YAML Mode (YAML Language Support)]]
  - [[#fullframe-maximize-buffer][Fullframe (Maximize buffer)]]
  - [[#magit-git-client][Magit (Git Client)]]
  - [[#general-global-hot-keys][General (Global Hot Keys)]]
  - [[#frame-settings][Frame Settings]]
  - [[#prompt-settings][Prompt Settings]]
  - [[#themes-and-icons][Themes and Icons]]
  - [[#font-configuration][Font Configuration]]
  - [[#frame-transparency][Frame Transparency]]
  - [[#pdf-tools-pdf-viewer][PDF Tools (PDF Viewer)]]
  - [[#latex-language-support][LaTeX Language Support]]
  - [[#vterm-setup][Vterm Setup]]
  - [[#eshell-setup][Eshell Setup]]
  - [[#exec-path-from-shell][Exec Path From Shell]]
  - [[#flyspell-spellcheck][Flyspell (Spellcheck)]]
  - [[#dired-configuration][Dired Configuration]]
  - [[#line-numbers][Line Numbers]]
  - [[#org-mode-extensions][Org Mode Extensions]]
  - [[#yasnippet-code-snippets][Yasnippet (Code Snippets)]]
  - [[#suppress-warnings][Suppress Warnings]]
  - [[#mode-line-customization][Mode Line Customization]]

** Use-Package Setup
#+BEGIN_SRC emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
  (add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/")) ;; installed by default
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/")) ;; installed by default from Emacs 28 onwards
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

  (package-initialize)
  (unless package-archive-contents
   (package-refresh-contents))


  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)

#+END_SRC

** GCMH (Garbage Collection Optimization)
#+begin_src emacs-lisp
   (use-package gcmh
     :init (gcmh-mode 1))
#+end_src

** Evil (Vim Emulation)
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init 
    (setq evil-want-keybinding nil)
    :custom
    (setq evil-want-integration t)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :hook (after-init . evil-collection-init))
#+END_SRC

** Undo Tree (Persistent Undo History)
#+begin_src emacs-lisp 
  (use-package undo-tree
    :hook (after-init . global-undo-tree-mode)
    :config
    (setq undo-tree-auto-save-history t)
    (let ((expanded-dir (expand-file-name "~/.config/emacs/undo")))
      (setq undo-tree-history-directory-alist (list (cons "." expanded-dir))))
    (global-undo-tree-mode)
    (evil-set-undo-system 'undo-tree))
#+end_src
** Which-Key (Key-Suggestions)
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :hook (after-init . which-key-mode)
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+END_SRC

** Ivy (Search Engine)
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :after counsel
    :config
    (ivy-rich-mode 1))

  (use-package all-the-icons-ivy-rich
    :after ivy-rich
    :config (all-the-icons-ivy-rich-mode 1))

  (use-package counsel
    :hook (after-init . counsel-mode)
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history)))

  (use-package prescient
     :after counsel)
  (use-package ivy-prescient
     :after prescient
     :config
     (ivy-prescient-mode))

#+END_SRC

** Electric Pair Mode (Automatic Delimiter Insertion)
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode)
#+END_SRC

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
  (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Helpful (Enhanced Help Functions)
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** Auto Revert Mode (Sync File Changes)
#+begin_src emacs-lisp
  (global-auto-revert-mode)
  (setq dired-auto-revert-buffer t)
#+end_src

** LSP Mode (LSP Support)
#+BEGIN_SRC emacs-lisp
       (use-package lsp-mode
	 :commands (lsp lsp-deferred)
	 :config
	 (setq lsp-inlay-hint-enable t)
	 (lsp-enable-which-key-integration t))

       (use-package lsp-ui
	 :hook (lsp-mode . lsp-ui-mode)
	   :custom
	   (lsp-ui-doc-position 'bottom))

       (use-package lsp-treemacs
	 :after lsp)

       (use-package lsp-ivy
         :after lsp)
#+END_SRC

** Dap Mode (Debugging)
#+begin_src emacs-lisp
  (use-package dap-mode
    :after lsp-mode
    :config (dap-auto-configure-mode))
  (defun debug-code () (interactive) (dap-delete-all-sessions) (dap-debug-last))
#+end_src

** Evil Nerd Commenter (Better Line Commenting)
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :defer
    :config (evilnc-default-hotkeys))
#+end_src

** Company (Autosuggestion)
#+BEGIN_SRC emacs-lisp
  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
	   ("<tab>" . company-complete-selection))
	  (:map lsp-mode-map
	   ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    (global-company-mode))

  (use-package company-box
    :hook (company-mode . company-box-mode))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :hook (after-init . projectile-mode)
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy)))
  (use-package counsel-projectile
    :after projectile
    :config (counsel-projectile-mode))
#+END_SRC

** Format All (format code)
#+begin_src emacs-lisp 
  (use-package format-all
    :hook
  (prog-mode . format-all-mode)
  (LaTeX-mode . format-all-mode))
#+end_src

** Rustic (Rust Language Support)
#+BEGIN_SRC emacs-lisp
  (use-package rustic
    :mode ("\\.rs\\'" . rustic-mode)
    :custom
    (setq rustic-analyzer-command '("~/.cargo/bin/rust-analyzer"))
    (setq lsp-rust-analyzer-cargo-watch-command "clippy")
    (setq rustic-rustfmt-args "--edition 2021")
    (setq rustic-cargo-check-exec-command "clippy"))
  (add-hook 'rust-mode-hook (lambda () (require 'dap-cpptools)))
  (add-hook 'rust-mode-hook (lambda () (require 'dap-gdb-lldb)))
  (defun register-rust-dap-profile () (interactive) (dap-register-debug-template "Rust::GDB Run Configuration"
								   (list :type "gdb"
									 :request "launch"
									 :name "GDB::Run"
									 :gdbpath "rust-gdb"
									 :target (concat (file-name-as-directory (projectile-project-root)) (file-name-as-directory "target") (file-name-as-directory "debug") (projectile-project-name))
									 :cwd (concat (file-name-as-directory (projectile-project-root)) (file-name-as-directory "src") ))))
  (add-hook 'dap-mode-hook 'register-rust-dap-profile)
#+END_SRC

** C Mode (C/C++ Language Support)
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'lsp)
#+end_src
** Python Mode (Python Language Support)
#+begin_src emacs-lisp
  (use-package python-mode
    :mode "\\.py\\'"
    :hook
    (python-mode . lsp)
    :config
    (setq python-shell-interpreter "python3"))
  (add-hook 'python-mode-hook (lambda () (require 'dap-python)))

  (setq dap-python-debugger 'debugpy)
  (use-package pyvenv
    :hook (python-mode . pyvenv-mode)
    :config (pyvenv-mode 1)
    (pyvenv-activate (concat (file-name-directory buffer-file-name) "venv")))
#+end_src

** Haskell Mode (Haskell Language Support)
#+begin_src emacs-lisp
      (use-package lsp-haskell
        :mode ("\\.hs\\'" . haskell-mode))

      ;; Hooks so haskell and literate haskell major modes trigger LSP setup
      (add-hook 'haskell-mode-hook #'lsp)
      (add-hook 'haskell-literate-mode-hook #'lsp)
#+end_src

** Racket Mode (Racket Language Support)
#+begin_src emacs-lisp
     (use-package racket-mode
	  :mode "\\.rkt\\'"
          :hook (racket-mode . lsp))
#+end_src

** Lua Mode (Lua Language Support)
#+begin_src emacs-lisp
  (use-package lua-mode
   :mode "\\.lua\\'")
#+end_src

** SQLS (SQL Language Support)
#+begin_src emacs-lisp
    (add-hook 'sql-mode-hook 'lsp)
    (setq lsp-sqls-workspace-config-path nil)
    (setq lsp-sqls-connections '(((driver . "postgresql") (dataSourceName . "host=127.0.0.1 port=5432 user=uwu password=uwu dbname=db sslmode=disable"))))
#+end_src

** PlantUML Language Support
#+begin_src emacs-lisp
    (use-package plantuml-mode
    :mode "\\.plantuml\\'"
    :mode "\\.pu\\'"
      :config
    (setq plantuml-jar-path "/home/gram/Downloads/plantuml-1.2024.0.jar")
    (setq plantuml-default-exec-mode 'jar)
    (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))
    (add-to-list 'auto-mode-alist '("\\.pu\\'" . plantuml-mode)))
#+end_src

** YAML Mode (YAML Language Support)
#+begin_src emacs-lisp
  (use-package yaml-mode
    :mode "\\.yaml\\'"
    :mode "\\.yml\\'"
	:config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode)))
#+end_src

** Fullframe (Maximize buffer)
#+begin_src emacs-lisp
  (use-package fullframe
    :after magit
    :config
  (fullframe magit-status magit-mode-quit-window))
#+end_src

** Magit (Git Client)
#+BEGIN_SRC emacs-lisp
    (use-package magit
     :commands (magit-status))
#+END_SRC

** General (Global Hot Keys)
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (use-package general
    :config
  (general-create-definer global-definer
    :keymaps 'override
    :states '(insert emacs normal hybrid motion visual operator)
    :prefix "SPC"
    :non-normal-prefix "S-SPC")
  (global-definer
    "."   '(counsel-find-file :which-key "find-file")
    "o"   '(nil :which-key "open")
    "o t" '((lambda () (interactive)
		(evil-window-split) 
		(evil-window-next 0)
		(evil-window-decrease-height 6)
		(if (projectile-project-p)
		    (projectile-run-vterm 1)
		  (vterm))
		) :which-key "vterm")
    "o T" '((lambda () (interactive)
		 (if (projectile-project-p)
		    (projectile-run-vterm 1)
		  (vterm))) :which-key "vterm fullscreen")
    "o e" '(lsp-treemacs-errors-list :which-key "project errors")
    "f"   '(nil :which-key "file")
    "f r" '(counsel-recentf :which-key "recent files")
    "f f" '(lsp-format-buffer :which-key "format buffer")
    "b"   '(nil :which-key "buffer")
    "b p" '(previous-buffer :which-key "previous buffer")
    "b n" '(next-buffer :which-key "next buffer")
    "b i" '(ivy-switch-buffer-other-window :which-key "list buffers")
    "SPC" '(projectile-find-file :which-key "search file")
    "p f" '(counsel-projectile-rg :which-key "search string")
    "p r" '(projectile-replace :which-key "replace string")
    "p R" '(projectile-replace-regexp :which-key "replace regex")
    "w"   '(nil :which-key "window")
    "w w" '(evil-window-next :which-key "next window")
    "w v" '(evil-window-vsplit :which-key "verticle split")
    "w h" '(evil-window-split :which-key "horizontal split")
    "w c" '(evil-window-delete :which-key "close window")
    "g"   '(nil :which-key "magit")
    "g g" '(magit :which-key "magit-status")
    "d e" '(emms-play-dired :which-key "dired play emms")
    "y"   '(ivy-yasnippet :which-key "yasnippet")
    "c d" '(debug-code :which-key "debug code")))
#+END_SRC

** Frame Settings
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq confirm-kill-processes nil)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
  (setq global-font-lock-mode t)
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (setq mouse-autoselect-window t)
#+END_SRC

** Prompt Settings
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Themes and Icons
#+BEGIN_SRC emacs-lisp
  (defun random-doom-theme ()
    "Returns a random doom-theme from a hardcoded list"
    (seq-random-elt
     '(doom-Iosvkem
       doom-horizon
       doom-molokai
       doom-old-hope
       doom-laserwave
       doom-tomorrow-night
       doom-challenger-deep
       doom-monokai-classic
       doom-outrun-electric
       doom-shades-of-purple
       doom-ayu-dark
       doom-dracula)))
  (defun setup-doom-theme ()
    "Setup doom theme."
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme (random-doom-theme) t)
    )
  (use-package doom-themes
   :after doom-modeline
   :config (setup-doom-theme))
  (use-package all-the-icons
    :defer)
  (use-package nerd-icons
    :defer
    :custom (nerd-icons-font-family "Mononoki Nerd Font"))
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

** Font Configuration
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Mononoki Nerd Font-18" ))
  (set-face-attribute 'default t :font "Mononoki Nerd Font-18" )
#+END_SRC

** Frame Transparency
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+END_SRC

** PDF Tools (PDF Viewer)
#+begin_src emacs-lisp
    (use-package pdf-tools
    :defer 1
    :config
     (pdf-loader-install)) ; On demand loading, leads to faster startup time
#+end_src

** LaTeX Language Support
#+begin_src emacs-lisp
      (use-package auctex
	:hook
      (LaTeX-mode . visual-line-mode)
      (LaTeX-mode . flyspell-mode)
      (LaTeX-mode . LaTeX-math-mode)
      (LaTeX-mode . turn-on-reftex)
      :config
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
      (setq reftex-plug-into-AUCTeX t)
      (setq TeX-PDF-mode t)
     (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
	TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
	TeX-source-correlate-start-server t) 
     (setq shell-escape-mode "-shell-escape")
     )
     (use-package lsp-latex
      :hook (tex-mode . lsp)
      (latex-mode . lsp))
#+end_src

** Vterm Setup
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :commands (vterm)
    :custom
  (setq vterm-shell "/usr/bin/fish")
  (evil-set-initial-state 'vterm-mode 'insert))
  
#+END_SRC

** Eshell Setup
#+begin_src emacs-lisp
  (use-package esh-autosuggest
    :after eshell
    :hook (eshell-mode . esh-autosuggest-mode))
  (use-package eshell-syntax-highlighting
    :after eshell
    :config
    (eshell-syntax-highlighting-global-mode +1))
  (use-package eshell-git-prompt
    :after eshell
    :config
    (eshell-git-prompt-use-theme 'powerline)
  (setq ivy-do-completion-in-region t)) ; this is the default

  (defun setup-eshell-ivy-completion ()
    (define-key eshell-mode-map [remap eshell-pcomplete] 'completion-at-point)
    ;; only if you want to use the minibuffer for completions instead of the
    ;; in-buffer interface
    (setq-local ivy-display-functions-alist
		(remq (assoc 'ivy-completion-in-region ivy-display-functions-alist)
		      ivy-display-functions-alist)))

  (add-hook 'eshell-mode-hook #'setup-eshell-ivy-completion)
  (setq eshell-banner-message "")
#+end_src

** Exec Path From Shell 
Ensures that the user path is the same as the `exec-path` variable at startup.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :hook
  (after-init . exec-path-from-shell-initialize))
#+END_SRC

** Flyspell (Spellcheck)
#+BEGIN_SRC emacs-lisp
    (add-hook 'text-mode-hook 'flyspell-mode)
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    (add-hook 'after-save-hook 'flyspell-buffer)
    (add-hook 'flyspell-mode-hook #'(lambda () (evil-define-key 'normal flyspell-mode-map (kbd ";") 'flyspell-correct-wrapper)))
    (setq flyspell-issue-message-flag nil)
    (use-package flyspell-correct-ivy
     :after flyspell)
#+END_SRC

** Dired Configuration
#+BEGIN_SRC emacs-lisp
  (setq dired-listing-switches "-Al --group-directories-first")
  (add-hook 'dired-mode-hook 'dired-sort-toggle-or-edit)
  (setq dired-dwim-target t)
  (evil-define-key 'normal dired-mode-map
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file)
#+END_SRC

** Line Numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
  (column-number-mode)
  (dolist (mode '(org-mode-hook
		    term-mode-hook
		    vterm-mode-hook
		    shell-mode-hook
		    treemacs-mode-hook
		    eshell-mode-hook
		    pdf-view-mode))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))
  (add-hook 'pdf-view-mode-hook (lambda() (display-line-numbers-mode 0)))
#+END_SRC

** Org Mode Extensions
#+BEGIN_SRC emacs-lisp
    (use-package org
     :mode 
     ("\\.org\\'" . org-mode))
    (use-package toc-org
    :hook
    (org-mode . toc-org-mode))
    (use-package org-bullets
      :hook (after-init . org-bullets-mode)
      :config
    (doom-themes-org-config)
    (org-bullets-mode 1))
#+END_SRC

** Yasnippet (Code Snippets)
#+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :defer 1
      :config (yas-global-mode 1))
    (use-package yasnippet-snippets
      :after yasnippet)
    (use-package ivy-yasnippet
      :after yasnippet-snippets)
#+END_SRC

** Suppress Warnings
#+begin_src emacs-lisp
  (setq warning-minimum-level-level ":error")
#+end_src

** Mode Line Customization
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package bluetooth
     :commands (bluetooth-list-devices))
#+end_src

#+begin_src emacs-lisp
 (message "Init Time: %s with %d garbage collections." (float-time (time-subtract after-init-time before-init-time)) gcs-done)
#+end_src
