** Use-Package Setup
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))


(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)

#+END_SRC

** Evil (Vim Emulation)
#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

** Which-Key (Key-Suggestions)
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+END_SRC

** Ivy (Search Engine)
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package all-the-icons-ivy-rich
    :after ivy-rich
    :config (all-the-icons-ivy-rich-mode 1))

  (use-package counsel
    :custom (counsel-mode 1)
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ("C-r" . 'counsel-minibuffer-history)))
#+END_SRC

** Electric Pair Mode (Automatic Delimiter Insertion)
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode)
#+END_SRC

** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook
  (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Helpful (Enhanced Help Functions)
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** LSP Mode (LSP Support)
#+BEGIN_SRC emacs-lisp
     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :init
       (setq lsp-inlay-hint-enable t)
       :config
       (lsp-enable-which-key-integration t))

     (use-package lsp-ui
       :hook (lsp-mode . lsp-ui-mode)
	 :custom
	 (lsp-ui-doc-position 'bottom))

     (use-package lsp-treemacs
       :after lsp)

     (use-package lsp-ivy)
#+END_SRC

** Company (Autosuggestions)
#+BEGIN_SRC emacs-lisp
	(use-package company
	  :hook (lsp-mode . company-mode)
	  :bind (:map company-active-map
		 ("<tab>" . company-complete-selection))
		(:map lsp-mode-map
		 ("<tab>" . company-indent-or-complete-common))
	  :custom
	  (company-minimum-prefix-length 1)
	  (company-idle-delay 0.0)
	  (global-company-mode))
         
	(use-package company-box
	  :hook (company-mode . company-box-mode))
#+END_SRC

** Projectile
#+BEGIN_SRC emacs-lisp
    (use-package projectile
      :config (projectile-mode)
      :custom ((projectile-completion-system 'ivy)))
    (use-package counsel-projectile
      :config (counsel-projectile-mode))
#+END_SRC

** Format All (format code)
#+begin_src emacs-lisp 
  (use-package format-all
    :hook
  (prog-mode . format-all-mode)
  (LaTeX-mode . format-all-mode))
#+end_src

** Rustic (Rust Language Support)
#+BEGIN_SRC emacs-lisp
(use-package rustic)
(setq rustic-analyzer-command '("~/.cargo/bin/rust-analyzer"))
#+END_SRC

** Fullframe (Maximize buffer)
#+begin_src emacs-lisp
  (use-package fullframe
    :config
  (fullframe magit-status magit-mode-quit-window))
#+end_src

** Magit (Git Client)
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC


** General
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (use-package general
    :config
  (general-create-definer global-definer
    :keymaps 'override
    :states '(insert emacs normal hybrid motion visual operator)
    :prefix "SPC"
    :non-normal-prefix "S-SPC")
  (global-definer
    "."   '(counsel-find-file :which-key "find-file")
    "o"   '(nil :which-key "open")
    "o t" '((lambda () (interactive)
	      (evil-window-split) 
	      (evil-window-next 0)
	      (evil-window-decrease-height 6)
	      (if (projectile-project-p)
		  (projectile-run-vterm 1)
		(vterm))
	      ) :which-key "vterm")
    "o T" '((lambda () (interactive)
	       (if (projectile-project-p)
		  (projectile-run-vterm 1)
		(vterm))) :which-key "vterm fullscreen")
    "o e" '(lsp-treemacs-errors-list :which-key "project errors")
    "f"   '(nil :which-key "file")
    "f r" '(counsel-recentf :which-key "recent files")
    "b"   '(nil :which-key "buffer")
    "b p" '(previous-buffer :which-key "previous buffer")
    "b n" '(next-buffer :which-key "next buffer")
    "b i" '(ivy-switch-buffer-other-window :which-key "list buffers")
    "SPC" '(projectile-find-file :which-key "search project")
    "w"   '(nil :which-key "window")
    "w w" '(evil-window-next :which-key "next window")
    "w v" '(evil-window-vsplit :which-key "verticle split")
    "w h" '(evil-window-split :which-key "horizontal split")
    "w c" '(evil-window-delete :which-key "close window")
    "g"   '(nil :which-key "magit")
    "g g" '(magit :which-key "magit-status")
    "d e" '(emms-play-dired :which-key "dired play emms")))
#+END_SRC

** Frame Settings
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq confirm-kill-processes nil)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
  (setq global-font-lock-mode t)
#+END_SRC

** Prompt Settings
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Themes and Icons
#+BEGIN_SRC emacs-lisp
  (defun random-doom-theme ()
    "Returns a random doom-theme from a hardcoded list"
    (seq-random-elt
     '(doom-Iosvkem
       doom-horizon
       doom-molokai
       doom-old-hope
       doom-laserwave
       doom-tomorrow-night
       doom-challenger-deep
       doom-monokai-classic
       doom-outrun-electric
       doom-shades-of-purple
       doom-ayu-dark
       doom-dracula)))
  (use-package doom-themes)
  (use-package all-the-icons)
  (use-package all-the-icons-dired)
  (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t)
  (load-theme (random-doom-theme) t)
  (doom-themes-org-config)
  (use-package nerd-icons)
#+END_SRC

** Font Configuration
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Mononoki Nerd Font-18" ))
  (set-face-attribute 'default t :font "Mononoki Nerd Font-18" )
#+END_SRC

** Frame Transperancy
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+END_SRC

** PDF Tools (PDF Viewer)
#+begin_src emacs-lisp
  (use-package pdf-tools
    :config
  (pdf-tools-install)  ; Standard activation command
  (pdf-loader-install)) ; On demand loading, leads to faster startup time
#+end_src

** LaTeX Language Support
#+begin_src emacs-lisp
   (use-package auctex
     :hook
   (LaTeX-mode . visual-line-mode)
   (LaTeX-mode . flyspell-mode)
   (LaTeX-mode . LaTeX-math-mode)
   (LaTeX-mode . turn-on-reftex)
   (LaTeX-mode . lsp-mode)
   :config
   (setq TeX-auto-save t)
   (setq TeX-parse-self t)
   (setq-default TeX-master nil)
   (setq reftex-plug-into-AUCTeX t)
   (setq TeX-PDF-mode t)
  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
     TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
     TeX-source-correlate-start-server t) 
  (setq shell-escape-mode "-shell-escape"))
   (use-package latex-preview-pane
     :config
   (latex-preview-pane-enable))
#+end_src

** Vterm Setup
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :custom
  (setq vterm-shell "/usr/bin/fish"))
#+END_SRC

** Exec Path From Shell 
Ensures that the user path is the same as the `exec-path` variable at startup.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :config
  (exec-path-from-shell-initialize))
#+END_SRC

** Flyspell (Spellcheck)
#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
(add-hook 'prog-mode-hook 'flyspell-prog-mode)
(add-hook 'after-save-hook 'flyspell-buffer)
(add-hook 'flyspell-mode-hook '(lambda () (evil-define-key 'normal flyspell-mode-map (kbd ";") 'flyspell-correct-wrapper)))
(setq flyspell-issue-message-flag nil)

** Dired Configuration
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-Al --group-directories-first")
(add-hook 'dired-mode-hook 'dired-sort-toggle-or-edit)
#+END_SRC
