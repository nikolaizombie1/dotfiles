#+TITLE: Emacs Literate Config

* Table Of Contents                                                     :TOC:
  - [[#straight-bootstrap][Straight Bootstrap]]
  - [[#frame-settings][Frame Settings]]
  - [[#prompt-settings][Prompt Settings]]
  - [[#evil-mode-setup][Evil Mode Setup]]
  - [[#themes-and-icons][Themes and Icons]]
  - [[#font-configuration][Font Configuration]]
  - [[#frame-transperancy][Frame Transperancy]]
  - [[#yasnippet-code-snippets][Yasnippet (Code Snippets)]]
  - [[#which-key-keybing-suggestions][Which Key (Keybing Suggestions)]]
  - [[#fullframe-maximize-buffer][Fullframe (Maximize buffer)]]
  - [[#lsp-and-dap-setup][LSP and DAP Setup]]
  - [[#rustic-rust-language-support][Rustic (Rust Language Support)]]
  - [[#cc-mode-setup-cc-language-support][CC Mode Setup (C/C++ Language Support)]]
  - [[#vterm-setup][Vterm Setup]]
  - [[#exec-path-from-shell][Exec Path From Shell]]
  - [[#magit-git-client][Magit (Git Client)]]
  - [[#fish-mode-fish-shell-language-support][Fish Mode (Fish Shell Language Support)]]
  - [[#lua-mode-luage-language-support][Lua Mode (Luage Language Support)]]
  - [[#latex-language-support][LaTeX Language Support]]
  - [[#line-numbers][Line Numbers]]
  - [[#electric-pair-mode-automatic-delimiter-insertion][Electric Pair Mode (Automatic Delimiter Insertion)]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#emacs-keybindings][Emacs Keybindings]]
  - [[#evil-mode-configuration-vim-emulation][Evil Mode Configuration (Vim Emulation)]]
  - [[#warning-minimum-level-suppress-comp-warnings][Warning Minimum Level (Suppress Comp Warnings)]]
  - [[#tab-always-indent-tab-indentation][Tab Always Indent (Tab Indentation)]]
  - [[#org-mode-extensions][Org Mode Extensions]]
  - [[#format-all-format-code][Format All (format code)]]
  - [[#flyspell-spellcheck][Flyspell (Spellcheck)]]
  - [[#pdf-tools-pdf-viewer][PDF Tools (PDF Viewer)]]
  - [[#dashboard][Dashboard]]
  - [[#syntax-checking-flycheck][Syntax Checking (flycheck)]]
  - [[#mode-line-theming][Mode Line Theming]]
  - [[#async-extensions][Async Extensions]]

** Straight Bootstrap
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+END_SRC

** Frame Settings
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (setq confirm-kill-processes nil)
  (scroll-bar-mode -1)
  (set-fringe-mode 10)
  (setq global-font-lock-mode t)
#+END_SRC

** Prompt Settings
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Evil Mode Setup
#+BEGIN_SRC emacs-lisp
  (setq evil-overriding-maps nil)
  (setq evil-want-keybinding nil)
  (setq evil-want-integration t)
  (straight-use-package 'evil)
  (evil-mode t)
  (straight-use-package 'evil-collection)
  (evil-collection-init)
  (evil-set-undo-system 'undo-redo)
#+END_SRC

** Themes and Icons
#+BEGIN_SRC emacs-lisp
    (defun random-doom-theme ()
      "Returns a random doom-theme from a hardcoded list"
      (seq-random-elt
       '(doom-Iosvkem
	 doom-horizon
	 doom-molokai
	 doom-old-hope
	 doom-laserwave
	 doom-tomorrow-night
	 doom-challenger-deep
	 doom-monokai-classic
	 doom-outrun-electric
	 doom-shades-of-purple
	 doom-ayu-dark
         doom-dracula)))
    (straight-use-package 'doom-themes)
    (straight-use-package 'all-the-icons)
    (straight-use-package 'all-the-icons-dired)
    (add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
    (setq doom-themes-enable-bold t)
    (setq doom-themes-enable-italic t)
    (load-theme (random-doom-theme) t)
    (doom-themes-org-config)
    (straight-use-package 'nerd-icons)
#+END_SRC

** Font Configuration
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Mononoki Nerd Font-18" ))
  (set-face-attribute 'default t :font "Mononoki Nerd Font-18" )
#+END_SRC

** Frame Transperancy
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
#+END_SRC

** Yasnippet (Code Snippets)
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'yasnippet)
  (straight-use-package 'yasnippet-snippets)
  (yas-global-mode 1)
#+END_SRC

** Which Key (Keybing Suggestions)
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'which-key)
  (which-key-mode)
  (setq which-key-idle-delay 0.3)
#+END_SRC

** Fullframe (Maximize buffer)
#+begin_src emacs-lisp
  (straight-use-package 'fullframe)
  (fullframe magit-status magit-mode-quit-window)
#+end_src
** LSP and DAP Setup
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'lsp-mode)
  (straight-use-package 'projectile)
  (projectile-mode +1)
  (straight-use-package 'ivy)
  (ivy-mode 1)
  (straight-use-package 'lsp-ivy)
  (straight-use-package 'counsel)
  (straight-use-package 'ivy-rich)
  (ivy-rich-mode 1)
  (straight-use-package 'all-the-icons-ivy-rich)
  (all-the-icons-ivy-rich-mode 1)
  (straight-use-package 'counsel-projectile)
  (straight-use-package 'ivy-yasnippet)
  (straight-use-package 'flyspell-correct-ivy)
  (setq flyspell-correct-interface #'flyspell-correct-ivy)
  (straight-use-package 'smex)
  (smex-initialize)
  (straight-use-package 'lsp-ui)
  (setq lsp-inlay-hint-enable t)
  (straight-use-package 'company)
  (straight-use-package 'company-mode)
  (global-company-mode)
  (setq company-minimum-prefix-length 1
	company-idle-delay 0.0) 
  (add-hook 'after-init-hook 'global-company-mode)
  (straight-use-package 'lsp-treemacs)
  (lsp-treemacs-sync-mode 1)
  (straight-use-package 'treemacs)
  (straight-use-package 'dap-mode)
  (dap-auto-configure-mode)
  (require 'dap-cpptools)
  (require 'dap-gdb-lldb)
#+END_SRC

** Rustic (Rust Language Support)
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'rustic)
  (setq rustic-cargo-check-exec-command "clippy")
  (setq rustic-rustfmt-args "--edition 2021")
  (dap-register-debug-template "Rust::GDB Run Configuration"
			       (list :type "gdb"
				     :request "launch"
				     :name "GDB::Run"
				     :gdbpath "rust-gdb"
				     :target "/home/uwu/Documents/Rust_Stuff/audio_output_switcher/target/debug/audio_output_switcher"
				     :arguments "-v -f /home/uwu/Documents/Rust_Stuff/audio_output_switcher/devices.json"
				     :cwd nil))
#+END_SRC

** CC Mode Setup (C/C++ Language Support)
#+begin_src emacs-lisp
  (setq company-clang-executable "/usr/bin/clang-16")
  (add-hook 'c-mode-hook 'lsp-mode)
#+end_src

** Vterm Setup
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'vterm)
  (setq vterm-shell "/usr/bin/fish")
#+END_SRC

** Exec Path From Shell 
Ensures that the user path is the same as the `exec-path` variable at startup.
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'exec-path-from-shell)
  (exec-path-from-shell-initialize)
#+END_SRC

** Magit (Git Client)
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'magit)
#+END_SRC

** Fish Mode (Fish Shell Language Support)
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'fish-mode)
#+END_SRC

** Lua Mode (Luage Language Support)
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'lua-mode)
#+END_SRC

** LaTeX Language Support
#+begin_src emacs-lisp
  (straight-use-package 'auctex)
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)
  (setq TeX-PDF-mode t)
  (add-hook 'LaTeX-mode-hook 'lsp-mode)
  (straight-use-package 'latex-preview-pane)
  (latex-preview-pane-enable)
  (setq doc-view-continuous t)
#+end_src

** Line Numbers
#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode)
  (column-number-mode)
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  vterm-mode-hook
		  shell-mode-hook
		  treemacs-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda() (display-line-numbers-mode 0))))
#+END_SRC

** Electric Pair Mode (Automatic Delimiter Insertion)
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode)
#+END_SRC

** Rainbow Delimiters
#+begin_src emacs-lisp
  (straight-use-package 'rainbow-delimiters)
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+end_src

** Emacs Keybindings
#+begin_src emacs-lisp 
  (straight-use-package 'general)
  (general-create-definer global-definer
    :keymaps 'override
    :states '(insert emacs normal hybrid motion visual operator)
    :prefix "SPC"
    :non-normal-prefix "S-SPC")
  (global-definer
    "."   '(counsel-find-file :which-key "find-file")
    "o"   '(nil :which-key "open")
    "o t" '((lambda () (interactive)
	      (evil-window-split) 
	      (evil-window-next 0)
	      (evil-window-decrease-height 6)
	      (if (projectile-project-p)
		  (projectile-run-vterm 1)
		(vterm))
	      ) :which-key "vterm")
    "f"   '(nil :which-key "file")
    "f r" '(counsel-recentf :which-key "recent files")
    "b"   '(nil :which-key "buffer")
    "b p" '(previous-buffer :which-key "previous buffer")
    "b n" '(next-buffer :which-key "next buffer")
    "b i" '(ivy-switch-buffer-other-window :which-key "list buffers")
    "SPC" '(projectile-find-file :which-key "search project")
    "w"   '(nil :which-key "window")
    "w w" '(evil-window-next :which-key "next window")
    "w v" '(evil-window-vsplit :which-key "verticle split")
    "w h" '(evil-window-split :which-key "horizontal split")
    "w c" '(evil-window-delete :which-key "close window")
    "g"   '(nil :which-key "magit")
    "g g" '(magit :which-key "magit-status"))
#+end_src

** Evil Mode Configuration (Vim Emulation)
#+begin_src emacs-lisp
  (evil-set-initial-state 'vterm-mode 'insert)
  (evil-define-key 'normal dired-mode-map
    (kbd "h") 'dired-up-directory
    (kbd "l") 'dired-find-file)
#+end_src

** Warning Minimum Level (Suppress Comp Warnings)
#+BEGIN_SRC emacs-lisp
  (setq warning-minimum-level-level ":error")
#+END_SRC

** Tab Always Indent (Tab Indentation)
#+BEGIN_SRC emacs-lisp
  (setq tab-always-indent 'complete)
#+END_SRC

** Org Mode Extensions
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'toc-org)
  (add-hook 'org-mode-hook 'toc-org-mode)
  (straight-use-package 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC

** Format All (format code)
#+begin_src emacs-lisp 
  (straight-use-package 'format-all)
  (add-hook 'prog-mode-hook 'format-all-mode)
#+end_src

** Flyspell (Spellcheck)
#+begin_src emacs-lisp
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (add-hook 'after-save-hook 'flyspell-buffer)
  (setq flyspell-issue-message-flag nil)
#+end_src

** PDF Tools (PDF Viewer)
#+begin_src emacs-lisp
  (straight-use-package 'pdf-tools)
#+end_src

** Dashboard
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'dashboard)
  (dashboard-setup-startup-hook)
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
  (setq dashboard-banner-logo-title nil)
  (setq dashboard-startup-banner "~/.config/emacs/GNU_Emacs-Logo.wine.svg")
  (setq dashboard-icon-type 'all-the-icons)
  (setq dashboard-show-shortcuts nil)
  (setq dashboard-center-content t)
  (setq dashboard-items '((recents  . 10)))
#+END_SRC

** Syntax Checking (flycheck)
#+begin_src emacs-lisp
  (straight-use-package 'flycheck)
  (add-hook 'after-init-hook #'global-flycheck-mode)
  (straight-use-package 'flycheck-pos-tip)
  (flycheck-pos-tip-mode)
#+end_src

** Mode Line Theming
#+begin_src emacs-lisp
  ;; (straight-use-package 'spaceline)
  ;; (spaceline-spacemacs-theme)
  (straight-use-package 'doom-modeline)
  (add-hook 'dashboard-after-initialize-hook #'doom-modeline-mode)
#+end_src

** Async Extensions
#+begin_src emacs-lisp
  (straight-use-package 'async)
  (dired-async-mode 1)
#+end_src
